/// <reference types="node" />
import { Primitive } from '@sindresorhus/is';
import { Document, Model, Schema, Types } from 'mongoose';
import 'reflect-metadata';
import { IMongooseClass } from './meta';
export * from './model';
export * from './schema';
export * from './model-helper';
export * from './middleware';
export { default as validators } from './validator';
export declare const ObjectId: Types.ObjectIdConstructor;
export declare type ObjectId = Types.ObjectId;
declare type ArrayType<T> = T extends Primitive ? Types.Array<T> : Types.Array<Types.Embedded & T>;
export declare type DocumentType<T> = {
    [TKey in keyof T]: T[TKey] extends Array<infer TValue> ? ArrayType<TValue> : T[TKey] extends Buffer ? Types.Buffer : T[TKey] extends Record<string, unknown> ? Types.Embedded & T[TKey] : T[TKey];
} & Document;
export declare type ModelType<T> = Model<DocumentType<T>>;
export declare type Ref<T extends {
    _id: unknown;
}> = T['_id'] | DocumentType<T>;
export declare function getSchema<T extends IMongooseClass>(modelClass: T): Schema;
export declare function getModel<T extends IMongooseClass>(modelClass: T): ModelType<InstanceType<T>> & T;
export declare function getModelName<T extends IMongooseClass>(modelClass: T): string;
export declare function forNestModule<T extends IMongooseClass>(modelClass: T): {
    name: string;
    schema: Schema;
};
