"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mongoId = exports.virtual = exports.methods = exports.query = exports.statics = exports.refArray = exports.ref = exports.enums = exports.type = exports.defaults = exports.unique = exports.hidden = exports.indexed = exports.required = exports.id = exports.array = exports.prop = void 0;
const mongoose_1 = require("mongoose");
const index_1 = require("./index");
const meta_1 = require("./meta");
const util_1 = require("./util");
function prop(options = {}, type) {
    return (target, name) => {
        var _a;
        const pathSchema = meta_1.getMongooseMeta(target).schema[name] || {};
        type = type || pathSchema['type'];
        if (!type && !options.type) {
            type = util_1.getType(target, name);
            if (((_a = type['prototype']) === null || _a === void 0 ? void 0 : _a[meta_1.mongooseMeta]) && !pathSchema['type']) {
                type = index_1.getSchema(type);
            }
        }
        meta_1.getMongooseMeta(target).schema[name] = { ...pathSchema, ...options, ...type ? { type } : {} };
    };
}
exports.prop = prop;
function array(type, options) {
    return (target, name) => {
        var _a, _b, _c;
        let t;
        if ((_a = type === null || type === void 0 ? void 0 : type['prototype']) === null || _a === void 0 ? void 0 : _a[meta_1.mongooseMeta]) {
            t = index_1.getSchema(type);
        }
        if ((_c = (_b = type === null || type === void 0 ? void 0 : type['type']) === null || _b === void 0 ? void 0 : _b['prototype']) === null || _c === void 0 ? void 0 : _c[meta_1.mongooseMeta]) {
            type['type'] = index_1.getSchema(type['type']);
        }
        const path = meta_1.getMongooseMeta(target).schema[name];
        if (!type)
            type = path['type'];
        if (type === mongoose_1.Types.ObjectId) {
            t = mongoose_1.Schema.Types.ObjectId;
        }
        t = t !== null && t !== void 0 ? t : type;
        meta_1.getMongooseMeta(target).schema[name] = { ...meta_1.getMongooseMeta(target).schema[name], ...options, type: [t] };
    };
}
exports.array = array;
function id() {
    return (target, name) => { };
}
exports.id = id;
function required() {
    return (target, name) => {
        meta_1.getMongooseMeta(target).schema[name] = { ...meta_1.getMongooseMeta(target).schema[name], required: true };
    };
}
exports.required = required;
function indexed() {
    return (target, name) => {
        meta_1.getMongooseMeta(target).schema[name] = { ...meta_1.getMongooseMeta(target).schema[name], index: true };
    };
}
exports.indexed = indexed;
function hidden() {
    return (target, name) => {
        meta_1.getMongooseMeta(target).schema[name] = { ...meta_1.getMongooseMeta(target).schema[name], select: false };
    };
}
exports.hidden = hidden;
function unique() {
    return (target, name) => {
        meta_1.getMongooseMeta(target).schema[name] = { ...meta_1.getMongooseMeta(target).schema[name], unique: true };
    };
}
exports.unique = unique;
function defaults(value) {
    return (target, name) => {
        meta_1.getMongooseMeta(target).schema[name] = { ...meta_1.getMongooseMeta(target).schema[name], default: value };
    };
}
exports.defaults = defaults;
function type(type) {
    return (target, name) => {
        meta_1.getMongooseMeta(target).schema[name] = { ...meta_1.getMongooseMeta(target).schema[name], type };
    };
}
exports.type = type;
function enums(values) {
    return (target, name) => {
        if (!Array.isArray(values)) {
            values = Object.values(values);
        }
        meta_1.getMongooseMeta(target).schema[name] = { ...meta_1.getMongooseMeta(target).schema[name], enum: values };
    };
}
exports.enums = enums;
function ref(nameOrClass, idType) {
    if (typeof nameOrClass === 'string') {
        return (target, name) => {
            meta_1.getMongooseMeta(target).schema[name] = { ...meta_1.getMongooseMeta(target).schema[name], ref: nameOrClass, type: idType };
        };
    }
    else if ('prototype' in nameOrClass && !!nameOrClass.prototype.constructor.name) {
        return (target, name) => {
            const field = meta_1.getMongooseMeta(target).schema[name] || {};
            const isArray = Array.isArray(field['type']);
            if (field['type'] === undefined || idType || isArray && field['type'][0] === undefined) {
                const type = idType || util_1.getType(nameOrClass.prototype, '_id');
                if (!type) {
                    throw new Error(`cannot get type for ref ${target.constructor.name}.${name} `
                        + `to ${nameOrClass.constructor.name}._id`);
                }
                if (isArray) {
                    field['type'] = [type];
                }
                else {
                    field['type'] = type;
                }
            }
            meta_1.getMongooseMeta(target).schema[name] = { ...field, ref: meta_1.getMongooseMeta(nameOrClass.prototype).name };
        };
    }
    else {
        return (target, name) => {
            const field = meta_1.getMongooseMeta(target).schema[name] || {};
            const isArray = Array.isArray(field['type']);
            if (isArray && !Array.isArray(idType)) {
                idType = [idType];
            }
            if (field['type'] === undefined || idType || isArray && field['type'][0] === undefined) {
                meta_1.getMongooseMeta(target).schema[name] = { ...field,
                    type: idType, ref: () => {
                        const clazz = nameOrClass();
                        const type = idType || util_1.getType(clazz.prototype, '_id');
                        if (!type) {
                            throw new Error(`cannot get type for ref ${target.constructor.name}.${name} `
                                + `to ${clazz.constructor.name}._id`);
                        }
                        return meta_1.getMongooseMeta(clazz.prototype).name;
                    } };
            }
        };
    }
}
exports.ref = ref;
function refArray(nameOrClass, elementType) {
    if (typeof nameOrClass === 'string') {
        return (target, name) => {
            meta_1.getMongooseMeta(target).schema[name] = {
                ...meta_1.getMongooseMeta(target).schema[name],
                type: [{ type: [elementType], ref: nameOrClass }],
            };
        };
    }
    else if ('prototype' in nameOrClass && !!nameOrClass.prototype.constructor.name) {
        return (target, name) => {
            meta_1.getMongooseMeta(target).schema[name] = {
                ...meta_1.getMongooseMeta(target).schema[name],
                type: [{ type: [elementType], ref: meta_1.getMongooseMeta(nameOrClass.prototype).name }],
            };
        };
    }
    else {
        return (target, name) => {
            meta_1.getMongooseMeta(target).schema[name] = {
                ...meta_1.getMongooseMeta(target).schema[name],
                type: [{
                        type: [elementType],
                        ref: () => {
                            const clazz = nameOrClass();
                            const type = elementType || util_1.getType(clazz.prototype, '_id');
                            if (!type) {
                                throw new Error(`cannot get type for ref ${target.constructor.name}.${name} `
                                    + `to ${clazz.constructor.name}._id`);
                            }
                            return meta_1.getMongooseMeta(clazz.prototype).name;
                        },
                    }],
            };
        };
    }
}
exports.refArray = refArray;
function statics() {
    return (target, name) => {
        meta_1.getMongooseMeta(target.prototype).statics[name] = target[name];
    };
}
exports.statics = statics;
function query() {
    return (target, name) => {
        meta_1.getMongooseMeta(target.prototype).queries[name] = target[name];
    };
}
exports.query = query;
function methods() {
    return (target, name) => {
        meta_1.getMongooseMeta(target).methods[name] = target[name];
    };
}
exports.methods = methods;
function virtual() {
    return (target, name, descriptor) => {
        meta_1.getMongooseMeta(target).virtuals[name] = descriptor;
    };
}
exports.virtual = virtual;
function mongoId(options = {}, type) {
    options = { validate: index_1.validators.mongoId, ...options };
    return prop(options, type);
}
exports.mongoId = mongoId;
//# sourceMappingURL=schema.js.map