import { SchemaDefinition, SchemaTypeOpts } from 'mongoose';
import { Constructor, IMongooseClass, Prototype } from './meta';
export declare function prop<T>(options?: SchemaTypeOpts<T> & {
    type?: T;
}, type?: SchemaDefinition['type']): PropertyDecorator;
export declare function array<T extends unknown>(type?: T, options?: SchemaTypeOpts<T[]>): (target: Prototype, name: string) => void;
export declare function id(): PropertyDecorator;
export declare function required(): PropertyDecorator;
export declare function indexed(): PropertyDecorator;
export declare function hidden(): PropertyDecorator;
export declare function unique(): PropertyDecorator;
export declare function defaults<T>(value: T): PropertyDecorator;
export declare function type(type: Prototype): PropertyDecorator;
export declare function enums(values: Array<string | number> | Record<string | number, string | number>): PropertyDecorator;
declare type LazyClass = () => Constructor;
export declare function ref(nameOrClass: string | LazyClass, idType: unknown): any;
export declare function ref(nameOrClass: IMongooseClass, idType?: unknown): any;
export declare function refArray(nameOrClass: string | LazyClass | IMongooseClass, elementType: unknown): PropertyDecorator;
export declare function statics(): PropertyDecorator;
export declare function query(): PropertyDecorator;
export declare function methods(): PropertyDecorator;
export declare function virtual(): MethodDecorator;
export declare function mongoId<T>(options?: SchemaTypeOpts<T> & {
    type?: T;
}, type?: T): PropertyDecorator;
export {};
